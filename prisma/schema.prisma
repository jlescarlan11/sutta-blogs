// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  blogs         BlogEntry[]
  followers     UserFollowed[]  @relation("follower")
  following     UserFollowed[]  @relation("followee")
  comments      UserCommented[]
  likes         UserLiked[]
  views         UserViewed[]
  accounts      Account[]
  sessions      Session[]
  commentLikes  UserCommentLike[]

  @@map("users")
}

model UserFollowed {
  followerId String
  followeeId String
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followee   User   @relation("followee", fields: [followeeId], references: [id])

  @@id([followerId, followeeId])
}

model BlogEntry {
  id          String          @id @default(uuid())
  title       String
  content     String
  isPublished Boolean         @default(false)
  readTime    Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  author      User            @relation(fields: [userId], references: [id])
  comments    UserCommented[]
  likes       UserLiked[]
  views       UserViewed[]
}

model UserCommented {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  blogId    String
  user      User      @relation(fields: [userId], references: [id])
  blog      BlogEntry @relation(fields: [blogId], references: [id])
  likes     UserCommentLike[]
}

model UserCommentLike {
  userId    String
  commentId String
  user      User           @relation(fields: [userId], references: [id])
  comment   UserCommented  @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model UserLiked {
  userId    String
  blogId    String
  user      User      @relation(fields: [userId], references: [id])
  blog      BlogEntry @relation(fields: [blogId], references: [id])
  createdAt DateTime  @default(now())

  @@id([userId, blogId])
}

model UserViewed {
  userId    String
  blogId    String
  user      User      @relation(fields: [userId], references: [id])
  blog      BlogEntry @relation(fields: [blogId], references: [id])
  createdAt DateTime  @default(now())

  @@id([userId, blogId])
}
